// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> initialize({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initialize(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitializeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize",
        argNames: [],
      );

  Future<Status> getStatus({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_status(port_),
      parseSuccessData: _wire2api_status,
      constMeta: kGetStatusConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_status",
        argNames: [],
      );

  Future<void> setProject({required String xml, dynamic hint}) {
    var arg0 = _platform.api2wire_String(xml);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_project(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetProjectConstMeta,
      argValues: [xml],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetProjectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_project",
        argNames: ["xml"],
      );

  Future<void> startProject({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_project(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kStartProjectConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartProjectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_project",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (MessageType, String) _wire2api___record__message_type_String(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_message_type(arr[0]),
      _wire2api_String(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  CustomButton _wire2api_box_autoadd_custom_button(dynamic raw) {
    return _wire2api_custom_button(raw);
  }

  CustomLabel _wire2api_box_autoadd_custom_label(dynamic raw) {
    return _wire2api_custom_label(raw);
  }

  CustomButton _wire2api_custom_button(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return CustomButton(
      id: _wire2api_String(arr[0]),
      x: _wire2api_f32(arr[1]),
      y: _wire2api_f32(arr[2]),
      width: _wire2api_f32(arr[3]),
      height: _wire2api_f32(arr[4]),
      backColor: _wire2api_custom_color(arr[5]),
      foreColor: _wire2api_custom_color(arr[6]),
      text: _wire2api_String(arr[7]),
      event: _wire2api_opt_String(arr[8]),
      fontSize: _wire2api_f32(arr[9]),
      style: _wire2api_custom_button_style(arr[10]),
      landscape: _wire2api_bool(arr[11]),
    );
  }

  CustomButtonStyle _wire2api_custom_button_style(dynamic raw) {
    return CustomButtonStyle.values[raw as int];
  }

  CustomColor _wire2api_custom_color(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return CustomColor(
      a: _wire2api_u8(arr[0]),
      r: _wire2api_u8(arr[1]),
      g: _wire2api_u8(arr[2]),
      b: _wire2api_u8(arr[3]),
    );
  }

  CustomControl _wire2api_custom_control(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomControl_Button(
          _wire2api_box_autoadd_custom_button(raw[1]),
        );
      case 1:
        return CustomControl_Label(
          _wire2api_box_autoadd_custom_label(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomLabel _wire2api_custom_label(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return CustomLabel(
      id: _wire2api_String(arr[0]),
      x: _wire2api_f32(arr[1]),
      y: _wire2api_f32(arr[2]),
      color: _wire2api_custom_color(arr[3]),
      text: _wire2api_String(arr[4]),
      fontSize: _wire2api_f32(arr[5]),
      align: _wire2api_custom_text_align(arr[6]),
      landscape: _wire2api_bool(arr[7]),
    );
  }

  CustomTextAlign _wire2api_custom_text_align(dynamic raw) {
    return CustomTextAlign.values[raw as int];
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<(MessageType, String)> _wire2api_list___record__message_type_String(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api___record__message_type_String)
        .toList();
  }

  List<CustomControl> _wire2api_list_custom_control(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_custom_control).toList();
  }

  MessageType _wire2api_message_type(dynamic raw) {
    return MessageType.values[raw as int];
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Status _wire2api_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Status(
      messages: _wire2api_list___record__message_type_String(arr[0]),
      controls: _wire2api_list_custom_control(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
