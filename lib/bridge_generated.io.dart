// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_DartRequestKey> api2wire_box_autoadd_dart_request_key(
      DartRequestKey raw) {
    final ptr = inner.new_box_autoadd_dart_request_key_0();
    _api_fill_to_wire_dart_request_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RequestResult> api2wire_box_autoadd_request_result(
      RequestResult raw) {
    final ptr = inner.new_box_autoadd_request_result_0();
    _api_fill_to_wire_request_result(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RustCommand> api2wire_box_autoadd_rust_command(
      RustCommand raw) {
    final ptr = inner.new_box_autoadd_rust_command_0();
    _api_fill_to_wire_rust_command(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SimpleValue> api2wire_box_autoadd_simple_value(
      SimpleValue raw) {
    final ptr = inner.new_box_autoadd_simple_value_0();
    _api_fill_to_wire_simple_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list___record__String_simple_value>
      api2wire_list___record__String_simple_value(
          List<(String, SimpleValue)> raw) {
    final ans = inner.new_list___record__String_simple_value_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire___record__String_simple_value(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_simple_value> api2wire_list_simple_value(
      List<SimpleValue> raw) {
    final ans = inner.new_list_simple_value_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_simple_value(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire___record__String_simple_value(
      (String, SimpleValue) apiObj,
      wire___record__String_simple_value wireObj) {
    wireObj.field0 = api2wire_String(apiObj.$1);
    _api_fill_to_wire_simple_value(apiObj.$2, wireObj.field1);
  }

  void _api_fill_to_wire_box_autoadd_dart_request_key(
      DartRequestKey apiObj, ffi.Pointer<wire_DartRequestKey> wireObj) {
    _api_fill_to_wire_dart_request_key(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_request_result(
      RequestResult apiObj, ffi.Pointer<wire_RequestResult> wireObj) {
    _api_fill_to_wire_request_result(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rust_command(
      RustCommand apiObj, ffi.Pointer<wire_RustCommand> wireObj) {
    _api_fill_to_wire_rust_command(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_simple_value(
      SimpleValue apiObj, ffi.Pointer<wire_SimpleValue> wireObj) {
    _api_fill_to_wire_simple_value(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_dart_request_key(
      DartRequestKey apiObj, wire_DartRequestKey wireObj) {
    wireObj.value = api2wire_usize(apiObj.value);
  }

  void _api_fill_to_wire_request_result(
      RequestResult apiObj, wire_RequestResult wireObj) {
    if (apiObj is RequestResult_Ok) {
      var pre_field0 = api2wire_box_autoadd_simple_value(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_RequestResult_Ok();
      wireObj.kind.ref.Ok.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is RequestResult_Err) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_RequestResult_Err();
      wireObj.kind.ref.Err.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_rust_command(
      RustCommand apiObj, wire_RustCommand wireObj) {
    if (apiObj is RustCommand_SetProject) {
      var pre_xml = api2wire_String(apiObj.xml);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_RustCommand_SetProject();
      wireObj.kind.ref.SetProject.ref.xml = pre_xml;
      return;
    }
    if (apiObj is RustCommand_Start) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is RustCommand_Stop) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is RustCommand_TogglePaused) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is RustCommand_InjectMessage) {
      var pre_msg_type = api2wire_String(apiObj.msgType);
      var pre_values =
          api2wire_list___record__String_simple_value(apiObj.values);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_RustCommand_InjectMessage();
      wireObj.kind.ref.InjectMessage.ref.msg_type = pre_msg_type;
      wireObj.kind.ref.InjectMessage.ref.values = pre_values;
      return;
    }
  }

  void _api_fill_to_wire_simple_value(
      SimpleValue apiObj, wire_SimpleValue wireObj) {
    if (apiObj is SimpleValue_Bool) {
      var pre_field0 = api2wire_bool(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_SimpleValue_Bool();
      wireObj.kind.ref.Bool.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SimpleValue_Number) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_SimpleValue_Number();
      wireObj.kind.ref.Number.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SimpleValue_String) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_SimpleValue_String();
      wireObj.kind.ref.String.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SimpleValue_List) {
      var pre_field0 = api2wire_list_simple_value(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_SimpleValue_List();
      wireObj.kind.ref.List.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SimpleValue_Image) {
      var pre_field0 = api2wire_uint_8_list(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_SimpleValue_Image();
      wireObj.kind.ref.Image.ref.field0 = pre_field0;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_initialize(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
    int utc_offset_in_seconds,
  ) {
    return _wire_initialize(
      port_,
      device_id,
      utc_offset_in_seconds,
    );
  }

  late final _wire_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_initialize');
  late final _wire_initialize = _wire_initializePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_send_command(
    int port_,
    ffi.Pointer<wire_RustCommand> cmd,
  ) {
    return _wire_send_command(
      port_,
      cmd,
    );
  }

  late final _wire_send_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_RustCommand>)>>('wire_send_command');
  late final _wire_send_command = _wire_send_commandPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RustCommand>)>();

  void wire_recv_commands(
    int port_,
  ) {
    return _wire_recv_commands(
      port_,
    );
  }

  late final _wire_recv_commandsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_recv_commands');
  late final _wire_recv_commands =
      _wire_recv_commandsPtr.asFunction<void Function(int)>();

  void wire_complete_request(
    int port_,
    ffi.Pointer<wire_DartRequestKey> key,
    ffi.Pointer<wire_RequestResult> result,
  ) {
    return _wire_complete_request(
      port_,
      key,
      result,
    );
  }

  late final _wire_complete_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DartRequestKey>,
              ffi.Pointer<wire_RequestResult>)>>('wire_complete_request');
  late final _wire_complete_request = _wire_complete_requestPtr.asFunction<
      void Function(int, ffi.Pointer<wire_DartRequestKey>,
          ffi.Pointer<wire_RequestResult>)>();

  ffi.Pointer<wire_DartRequestKey> new_box_autoadd_dart_request_key_0() {
    return _new_box_autoadd_dart_request_key_0();
  }

  late final _new_box_autoadd_dart_request_key_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartRequestKey> Function()>>(
          'new_box_autoadd_dart_request_key_0');
  late final _new_box_autoadd_dart_request_key_0 =
      _new_box_autoadd_dart_request_key_0Ptr
          .asFunction<ffi.Pointer<wire_DartRequestKey> Function()>();

  ffi.Pointer<wire_RequestResult> new_box_autoadd_request_result_0() {
    return _new_box_autoadd_request_result_0();
  }

  late final _new_box_autoadd_request_result_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RequestResult> Function()>>(
          'new_box_autoadd_request_result_0');
  late final _new_box_autoadd_request_result_0 =
      _new_box_autoadd_request_result_0Ptr
          .asFunction<ffi.Pointer<wire_RequestResult> Function()>();

  ffi.Pointer<wire_RustCommand> new_box_autoadd_rust_command_0() {
    return _new_box_autoadd_rust_command_0();
  }

  late final _new_box_autoadd_rust_command_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RustCommand> Function()>>(
          'new_box_autoadd_rust_command_0');
  late final _new_box_autoadd_rust_command_0 =
      _new_box_autoadd_rust_command_0Ptr
          .asFunction<ffi.Pointer<wire_RustCommand> Function()>();

  ffi.Pointer<wire_SimpleValue> new_box_autoadd_simple_value_0() {
    return _new_box_autoadd_simple_value_0();
  }

  late final _new_box_autoadd_simple_value_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SimpleValue> Function()>>(
          'new_box_autoadd_simple_value_0');
  late final _new_box_autoadd_simple_value_0 =
      _new_box_autoadd_simple_value_0Ptr
          .asFunction<ffi.Pointer<wire_SimpleValue> Function()>();

  ffi.Pointer<wire_list___record__String_simple_value>
      new_list___record__String_simple_value_0(
    int len,
  ) {
    return _new_list___record__String_simple_value_0(
      len,
    );
  }

  late final _new_list___record__String_simple_value_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list___record__String_simple_value> Function(
              ffi.Int32)>>('new_list___record__String_simple_value_0');
  late final _new_list___record__String_simple_value_0 =
      _new_list___record__String_simple_value_0Ptr.asFunction<
          ffi.Pointer<wire_list___record__String_simple_value> Function(int)>();

  ffi.Pointer<wire_list_simple_value> new_list_simple_value_0(
    int len,
  ) {
    return _new_list_simple_value_0(
      len,
    );
  }

  late final _new_list_simple_value_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_simple_value> Function(
              ffi.Int32)>>('new_list_simple_value_0');
  late final _new_list_simple_value_0 = _new_list_simple_value_0Ptr
      .asFunction<ffi.Pointer<wire_list_simple_value> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<RequestResultKind> inflate_RequestResult_Ok() {
    return _inflate_RequestResult_Ok();
  }

  late final _inflate_RequestResult_OkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RequestResultKind> Function()>>(
          'inflate_RequestResult_Ok');
  late final _inflate_RequestResult_Ok = _inflate_RequestResult_OkPtr
      .asFunction<ffi.Pointer<RequestResultKind> Function()>();

  ffi.Pointer<RequestResultKind> inflate_RequestResult_Err() {
    return _inflate_RequestResult_Err();
  }

  late final _inflate_RequestResult_ErrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RequestResultKind> Function()>>(
          'inflate_RequestResult_Err');
  late final _inflate_RequestResult_Err = _inflate_RequestResult_ErrPtr
      .asFunction<ffi.Pointer<RequestResultKind> Function()>();

  ffi.Pointer<RustCommandKind> inflate_RustCommand_SetProject() {
    return _inflate_RustCommand_SetProject();
  }

  late final _inflate_RustCommand_SetProjectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RustCommandKind> Function()>>(
          'inflate_RustCommand_SetProject');
  late final _inflate_RustCommand_SetProject =
      _inflate_RustCommand_SetProjectPtr
          .asFunction<ffi.Pointer<RustCommandKind> Function()>();

  ffi.Pointer<RustCommandKind> inflate_RustCommand_InjectMessage() {
    return _inflate_RustCommand_InjectMessage();
  }

  late final _inflate_RustCommand_InjectMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RustCommandKind> Function()>>(
          'inflate_RustCommand_InjectMessage');
  late final _inflate_RustCommand_InjectMessage =
      _inflate_RustCommand_InjectMessagePtr
          .asFunction<ffi.Pointer<RustCommandKind> Function()>();

  ffi.Pointer<SimpleValueKind> inflate_SimpleValue_Bool() {
    return _inflate_SimpleValue_Bool();
  }

  late final _inflate_SimpleValue_BoolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SimpleValueKind> Function()>>(
          'inflate_SimpleValue_Bool');
  late final _inflate_SimpleValue_Bool = _inflate_SimpleValue_BoolPtr
      .asFunction<ffi.Pointer<SimpleValueKind> Function()>();

  ffi.Pointer<SimpleValueKind> inflate_SimpleValue_Number() {
    return _inflate_SimpleValue_Number();
  }

  late final _inflate_SimpleValue_NumberPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SimpleValueKind> Function()>>(
          'inflate_SimpleValue_Number');
  late final _inflate_SimpleValue_Number = _inflate_SimpleValue_NumberPtr
      .asFunction<ffi.Pointer<SimpleValueKind> Function()>();

  ffi.Pointer<SimpleValueKind> inflate_SimpleValue_String() {
    return _inflate_SimpleValue_String();
  }

  late final _inflate_SimpleValue_StringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SimpleValueKind> Function()>>(
          'inflate_SimpleValue_String');
  late final _inflate_SimpleValue_String = _inflate_SimpleValue_StringPtr
      .asFunction<ffi.Pointer<SimpleValueKind> Function()>();

  ffi.Pointer<SimpleValueKind> inflate_SimpleValue_List() {
    return _inflate_SimpleValue_List();
  }

  late final _inflate_SimpleValue_ListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SimpleValueKind> Function()>>(
          'inflate_SimpleValue_List');
  late final _inflate_SimpleValue_List = _inflate_SimpleValue_ListPtr
      .asFunction<ffi.Pointer<SimpleValueKind> Function()>();

  ffi.Pointer<SimpleValueKind> inflate_SimpleValue_Image() {
    return _inflate_SimpleValue_Image();
  }

  late final _inflate_SimpleValue_ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SimpleValueKind> Function()>>(
          'inflate_SimpleValue_Image');
  late final _inflate_SimpleValue_Image = _inflate_SimpleValue_ImagePtr
      .asFunction<ffi.Pointer<SimpleValueKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_RustCommand_SetProject extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> xml;
}

final class wire_RustCommand_Start extends ffi.Opaque {}

final class wire_RustCommand_Stop extends ffi.Opaque {}

final class wire_RustCommand_TogglePaused extends ffi.Opaque {}

final class wire_SimpleValue_Bool extends ffi.Struct {
  @ffi.Bool()
  external bool field0;
}

final class wire_SimpleValue_Number extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class wire_SimpleValue_String extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_list_simple_value extends ffi.Struct {
  external ffi.Pointer<wire_SimpleValue> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_SimpleValue extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SimpleValueKind> kind;
}

final class SimpleValueKind extends ffi.Union {
  external ffi.Pointer<wire_SimpleValue_Bool> Bool;

  external ffi.Pointer<wire_SimpleValue_Number> Number;

  external ffi.Pointer<wire_SimpleValue_String> String;

  external ffi.Pointer<wire_SimpleValue_List> List;

  external ffi.Pointer<wire_SimpleValue_Image> Image;
}

final class wire_SimpleValue_List extends ffi.Struct {
  external ffi.Pointer<wire_list_simple_value> field0;
}

final class wire_SimpleValue_Image extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire___record__String_simple_value extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  external wire_SimpleValue field1;
}

final class wire_list___record__String_simple_value extends ffi.Struct {
  external ffi.Pointer<wire___record__String_simple_value> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_RustCommand_InjectMessage extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> msg_type;

  external ffi.Pointer<wire_list___record__String_simple_value> values;
}

final class RustCommandKind extends ffi.Union {
  external ffi.Pointer<wire_RustCommand_SetProject> SetProject;

  external ffi.Pointer<wire_RustCommand_Start> Start;

  external ffi.Pointer<wire_RustCommand_Stop> Stop;

  external ffi.Pointer<wire_RustCommand_TogglePaused> TogglePaused;

  external ffi.Pointer<wire_RustCommand_InjectMessage> InjectMessage;
}

final class wire_RustCommand extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<RustCommandKind> kind;
}

final class wire_DartRequestKey extends ffi.Struct {
  @ffi.UintPtr()
  external int value;
}

final class wire_RequestResult_Ok extends ffi.Struct {
  external ffi.Pointer<wire_SimpleValue> field0;
}

final class wire_RequestResult_Err extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class RequestResultKind extends ffi.Union {
  external ffi.Pointer<wire_RequestResult_Ok> Ok;

  external ffi.Pointer<wire_RequestResult_Err> Err;
}

final class wire_RequestResult extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<RequestResultKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
