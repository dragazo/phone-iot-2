// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<void> initialize({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeConstMeta;

  Future<Status> getStatus({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetStatusConstMeta;

  Future<void> setProject({required String xml, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetProjectConstMeta;

  Future<void> startProject({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartProjectConstMeta;
}

class CustomButton {
  final String id;
  final double x;
  final double y;
  final double width;
  final double height;
  final CustomColor backColor;
  final CustomColor foreColor;
  final String text;
  final String? event;
  final double fontSize;
  final CustomButtonStyle style;
  final bool landscape;

  const CustomButton({
    required this.id,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    required this.backColor,
    required this.foreColor,
    required this.text,
    this.event,
    required this.fontSize,
    required this.style,
    required this.landscape,
  });
}

enum CustomButtonStyle {
  Rectangle,
  Ellipse,
  Square,
  Circle,
}

class CustomColor {
  final int a;
  final int r;
  final int g;
  final int b;

  const CustomColor({
    required this.a,
    required this.r,
    required this.g,
    required this.b,
  });
}

class CustomControls {
  final List<CustomButton> buttons;

  const CustomControls({
    required this.buttons,
  });
}

enum MessageType {
  Output,
  Error,
}

class Status {
  final List<(MessageType, String)> messages;
  final CustomControls controls;

  const Status({
    required this.messages,
    required this.controls,
  });
}
