#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_initialize_impl(
    port_: MessagePort,
    utc_offset_in_seconds: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "initialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_utc_offset_in_seconds = utc_offset_in_seconds.wire2api();
            move |task_callback| Ok(initialize(api_utc_offset_in_seconds))
        },
    )
}
fn wire_send_command_impl(port_: MessagePort, cmd: impl Wire2Api<RustCommand> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "send_command",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_cmd = cmd.wire2api();
            move |task_callback| Ok(send_command(api_cmd))
        },
    )
}
fn wire_recv_commands_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "recv_commands",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| Ok(recv_commands(task_callback.stream_sink::<_, DartCommand>()))
        },
    )
}
fn wire_complete_request_impl(
    port_: MessagePort,
    key: impl Wire2Api<DartRequestKey> + UnwindSafe,
    result: impl Wire2Api<RequestResult> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "complete_request",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_result = result.wire2api();
            move |task_callback| Ok(complete_request(api_key, api_result))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for ButtonInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.back_color.into_into_dart().into_dart(),
            self.fore_color.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.font_size.into_into_dart().into_dart(),
            self.style.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ButtonInfo {}
impl rust2dart::IntoIntoDart<ButtonInfo> for ButtonInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ButtonStyleInfo {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Rectangle => 0,
            Self::Ellipse => 1,
            Self::Square => 2,
            Self::Circle => 3,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ButtonStyleInfo {}
impl rust2dart::IntoIntoDart<ButtonStyleInfo> for ButtonStyleInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ColorInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.r.into_into_dart().into_dart(),
            self.g.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ColorInfo {}
impl rust2dart::IntoIntoDart<ColorInfo> for ColorInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DartCommand {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Stdout { msg } => vec![0.into_dart(), msg.into_into_dart().into_dart()],
            Self::Stderr { msg } => vec![1.into_dart(), msg.into_into_dart().into_dart()],
            Self::ClearControls { key } => vec![2.into_dart(), key.into_into_dart().into_dart()],
            Self::RemoveControl { key, id } => vec![
                3.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
            Self::AddLabel { key, info } => vec![
                4.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddButton { key, info } => vec![
                5.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddTextField { key, info } => vec![
                6.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddJoystick { key, info } => vec![
                7.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddTouchpad { key, info } => vec![
                8.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddSlider { key, info } => vec![
                9.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddToggle { key, info } => vec![
                10.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::AddImageDisplay { key, info } => vec![
                11.into_dart(),
                key.into_into_dart().into_dart(),
                info.into_into_dart().into_dart(),
            ],
            Self::GetText { key, id } => vec![
                12.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
            Self::SetText { key, id, value } => vec![
                13.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
                value.into_into_dart().into_dart(),
            ],
            Self::GetLevel { key, id } => vec![
                14.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
            Self::SetLevel { key, id, value } => vec![
                15.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
                value.into_into_dart().into_dart(),
            ],
            Self::GetToggleState { key, id } => vec![
                16.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
            Self::SetToggleState { key, id, value } => vec![
                17.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
                value.into_into_dart().into_dart(),
            ],
            Self::GetImage { key, id } => vec![
                18.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
            Self::SetImage { key, id, value } => vec![
                19.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
                value.into_into_dart().into_dart(),
            ],
            Self::GetPosition { key, id } => vec![
                20.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
            Self::IsPressed { key, id } => vec![
                21.into_dart(),
                key.into_into_dart().into_dart(),
                id.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartCommand {}
impl rust2dart::IntoIntoDart<DartCommand> for DartCommand {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DartRequestKey {
    fn into_dart(self) -> support::DartAbi {
        vec![self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartRequestKey {}
impl rust2dart::IntoIntoDart<DartRequestKey> for DartRequestKey {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ImageDisplayInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.readonly.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
            self.fit.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ImageDisplayInfo {}
impl rust2dart::IntoIntoDart<ImageDisplayInfo> for ImageDisplayInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ImageFitInfo {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Fit => 0,
            Self::Zoom => 1,
            Self::Stretch => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ImageFitInfo {}
impl rust2dart::IntoIntoDart<ImageFitInfo> for ImageFitInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for JoystickInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.color.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for JoystickInfo {}
impl rust2dart::IntoIntoDart<JoystickInfo> for JoystickInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LabelInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.color.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.font_size.into_into_dart().into_dart(),
            self.align.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LabelInfo {}
impl rust2dart::IntoIntoDart<LabelInfo> for LabelInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SliderInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.color.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
            self.style.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
            self.readonly.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SliderInfo {}
impl rust2dart::IntoIntoDart<SliderInfo> for SliderInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SliderStyleInfo {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Slider => 0,
            Self::Progress => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SliderStyleInfo {}
impl rust2dart::IntoIntoDart<SliderStyleInfo> for SliderStyleInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TextAlignInfo {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Left => 0,
            Self::Center => 1,
            Self::Right => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TextAlignInfo {}
impl rust2dart::IntoIntoDart<TextAlignInfo> for TextAlignInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TextFieldInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.back_color.into_into_dart().into_dart(),
            self.fore_color.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.font_size.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
            self.readonly.into_into_dart().into_dart(),
            self.align.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TextFieldInfo {}
impl rust2dart::IntoIntoDart<TextFieldInfo> for TextFieldInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ToggleInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.style.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.checked.into_into_dart().into_dart(),
            self.fore_color.into_into_dart().into_dart(),
            self.back_color.into_into_dart().into_dart(),
            self.font_size.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
            self.readonly.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ToggleInfo {}
impl rust2dart::IntoIntoDart<ToggleInfo> for ToggleInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ToggleStyleInfo {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Switch => 0,
            Self::Checkbox => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ToggleStyleInfo {}
impl rust2dart::IntoIntoDart<ToggleStyleInfo> for ToggleStyleInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TouchpadInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.event.into_dart(),
            self.color.into_into_dart().into_dart(),
            self.style.into_into_dart().into_dart(),
            self.landscape.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TouchpadInfo {}
impl rust2dart::IntoIntoDart<TouchpadInfo> for TouchpadInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TouchpadStyleInfo {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Rectangle => 0,
            Self::Square => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TouchpadStyleInfo {}
impl rust2dart::IntoIntoDart<TouchpadStyleInfo> for TouchpadStyleInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
